*list*

(PHP 4, PHP 5, PHP 7)

list â€” Assign variables as if they were an array

===============================================================================
[ Description ]

  list ( mixed $var1 [, mixed $... ] ) : array~

Like |array|, this is not really a function, but a language construct. list()
is used to assign a list of variables in one operation.

  Note:

  Before PHP 7.1.0, list() only worked on numerical arrays and assumes the
  numerical indices start at 0.

Warning

In PHP 5, list() assigns the values starting with the right-most parameter. In
PHP 7, list() starts with the left-most parameter.

If you are using plain variables, you don't have to worry about this. But if
you are using arrays with indices you usually expect the order of the indices
in the array the same you wrote in the list() from left to right, which is not
the case in PHP 5, as it's assigned in the reverse order.

Generally speaking, it is advisable to avoid relying on a specific order of
operation, as this may change again in the future.

Warning

Modification of the array during list() execution (e.g. using list($a, $b) = $b
) results in undefined behavior.

===============================================================================
[ Parameters ]

{var1}

  A variable.

===============================================================================
[ Return Values ]

Returns the assigned array.

===============================================================================
[ Changelog ]

Version                               Description
7.1.0   It is now possible to specify keys in list(). This enables
        destructuring of arrays with non-integer or non-sequential keys.
7.0.0   The order that the assignment operations are performed in has changed.
7.0.0   list() expressions can no longer be completely empty.
7.0.0   Strings can no longer be unpacked.

===============================================================================
[ Examples ]

Example #1 list() examples

<?php >

  $info = array('coffee', 'brown', 'caffeine');

  // Listing all the variables
  list($drink, $color, $power) = $info;
  echo "$drink is $color and $power makes it special.\n";

  // Listing some of them
  list($drink, , $power) = $info;
  echo "$drink has $power.\n";

  // Or let's skip to only the third one
  list( , , $power) = $info;
  echo "I need $power!\n";

  // list() doesn't work with strings
  list($bar) = "abcde";
  var_dump($bar); // NULL
<?>

Example #2 An example use of list()

<table>
 <tr>
  <th>Employee name</th>
  <th>Salary</th>
 </tr>

<?php >
  $result = $pdo->query("SELECT id, name, salary FROM employees");
  while (list($id, $name, $salary) = $result->fetch(PDO::FETCH_NUM)) {
      echo " <tr>\n" .
            "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .
            "  <td>$salary</td>\n" .
            " </tr>\n";
  }

<?>

</table>

Example #3 Using nested list()

<?php >

  list($a, list($b, $c)) = array(1, array(2, 3));

  var_dump($a, $b, $c);

<?>

int(1)
int(2)
int(3)

Example #4 Using list() with array indices

<?php >

  $info = array('coffee', 'brown', 'caffeine');

  list($a[0], $a[1], $a[2]) = $info;

  var_dump($a);

<?>

Gives the following output (note the order of the elements compared in which
order they were written in the list() syntax):

Output of the above example in PHP 7:

array(3) {
  [0]=>
  string(6) "coffee"
  [1]=>
  string(5) "brown"
  [2]=>
  string(8) "caffeine"
}

Output of the above example in PHP 5:

array(3) {
  [2]=>
  string(8) "caffeine"
  [1]=>
  string(5) "brown"
  [0]=>
  string(6) "coffee"
}

Example #5 list() and order of index definitions

The order in which the indices of the array to be consumed by list() are
defined is irrelevant.

<?php >
$foo = array(2 => 'a', 'foo' => 'b', 0 => 'c');
$foo[1] = 'd';
list($x, $y, $z) = $foo;
var_dump($foo, $x, $y, $z);

Gives the following output (note the order of the elements compared in which
order they were written in the list() syntax):

array(4) {
  [2]=>
  string(1) "a"
  ["foo"]=>
  string(1) "b"
  [0]=>
  string(1) "c"
  [1]=>
  string(1) "d"
}
string(1) "c"
string(1) "d"
string(1) "a"

Example #6 list() with keys

As of PHP 7.1.0 list() can now also contain explicit keys, which can be given
as arbitrary expressions. Mixing of integer and string keys is allowed;
however, elements with and without keys cannot be mixed.

<?php >
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];
foreach ($data as ["id" => $id, "name" => $name]) {
    echo "id: $id, name: $name\n";
}
echo PHP_EOL;
list(1 => $second, 3 => $fourth) = [1, 2, 3, 4];
echo "$second, $fourth\n";

The above example will output:

id: 1, name: Tom
id: 2, name: Fred

2, 4

===============================================================================
[ See Also ]

 * |each| - Return the current key and value pair from an array and advance the
  array cursor
 * |array| - Create an array
 * |extract| - Import variables into the current symbol table from an array


vim:ft=help: