*vfprintf*

(PHP 5, PHP 7)

vfprintf — Write a formatted string to a stream

===============================================================================
[ Description ]

  vfprintf ( resource $handle , string $format , array $args ) : int~

Write a string produced according to {format} to the stream resource specified
by {handle}.

Operates as |fprintf| but accepts an array of arguments, rather than a variable
number of arguments.

===============================================================================
[ Parameters ]

{handle}

{format}

  The format string is composed of zero or more directives: ordinary characters
  (excluding %) that are copied directly to the result and conversion
  specifications, each of which results in fetching its own parameter.

  A conversion specification follows this prototype: %[flags][width]
  [.precision]specifier.

                                     Flags
   Flag                                Description
  -       Left-justify within the given field width; Right justification is the
          default
  +       Prefix positive numbers with a plus sign +; Default only negative are
          prefixed with a negative sign.
  (space) Pads the result with spaces. This is the default.
  0       Only left-pads numbers with zeros. With s specifiers this can also
          right-pad with zeros.
  '(char) Pads the result with the character (char).

  Width

  An integer that says how many characters (minimum) this conversion should
  result in.

  Precision

  A period . followed by an integer who's meaning depends on the specifier:
   + For e, E, f and F specifiers: this is the number of digits to be printed
    after the decimal point (by default, this is 6).
   + For g and G specifiers: this is the maximum number of significant digits
    to be printed.
   + For s specifier: it acts as a cutoff point, setting a maximum character
    limit to the string.


    Note: If the period is specified without an explicit value for precision, 0
    is assumed.

    Note: Attempting to use a position specifier greater than PHP_INT_MAX will
    generate warnings.

                                  Specifiers
  Specifier                             Description
  %         A literal percent character. No argument is required.
  b         The argument is treated as an integer and presented as a binary
            number.
  c         The argument is treated as an integer and presented as the
            character with that ASCII.
  d         The argument is treated as an integer and presented as a (signed)
            decimal number.
            The argument is treated as scientific notation (e.g. 1.2e+2). The
  e         precision specifier stands for the number of digits after the
            decimal point since PHP 5.2.1. In earlier versions, it was taken as
            number of significant digits (one less).
  E         Like the e specifier but uses uppercase letter (e.g. 1.2E+2).
  f         The argument is treated as a float and presented as a
            floating-point number (locale aware).
            The argument is treated as a float and presented as a
  F         floating-point number (non-locale aware). Available as of PHP
            5.0.3.
            General format.

            Let P equal the precision if nonzero, 6 if the precision is
            omitted, or 1 if the precision is zero. Then, if a conversion with
  g         style E would have an exponent of X:

            If P > X ≥ −4, the conversion is with style f and precision P − (X
            + 1). Otherwise, the conversion is with style e and precision P −
            1.

  G         Like the g specifier but uses E and F.
  o         The argument is treated as an integer and presented as an octal
            number.
  s         The argument is treated and presented as a string.
  u         The argument is treated as an integer and presented as an unsigned
            decimal number.
  x         The argument is treated as an integer and presented as a
            hexadecimal number (with lowercase letters).
  X         The argument is treated as an integer and presented as a
            hexadecimal number (with uppercase letters).

  Warning

  The c type specifier ignores padding and width

  Warning

  Attempting to use a combination of the string and width specifiers with
  character sets that require more than one byte per character may result in
  unexpected results

  Variables will be co-erced to a suitable type for the specifier:

        Type Handling
   Type        Specifiers
  string  s
  integer d, u, c, o, x, X, b
  double  g, G, e, E, f, F

{args}

===============================================================================
[ Return Values ]

Returns the length of the outputted string.

===============================================================================
[ Examples ]

Example #1 vfprintf(): zero-padded integers

<?php >
  if (!($fp = fopen('date.txt', 'w')))
      return;

  vfprintf($fp, "%04d-%02d-%02d", array($year, $month, $day));
  // will write the formatted ISO date to date.txt
<?>

===============================================================================
[ See Also ]

 * |printf| - Output a formatted string
 * |sprintf| - Return a formatted string
 * |fprintf| - Write a formatted string to a stream
 * |vprintf| - Output a formatted string
 * |vsprintf| - Return a formatted string
 * |sscanf| - Parses input from a string according to a format
 * |fscanf| - Parses input from a file according to a format
 * |number_format| - Format a number with grouped thousands
 * |date| - Format a local time/date


vim:ft=help: