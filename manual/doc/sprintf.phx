*sprintf*

(PHP 4, PHP 5, PHP 7)

sprintf — Return a formatted string

===============================================================================
[ Description ]

  sprintf ( string $format [, mixed $... ] ) : string~

Returns a string produced according to the formatting string {format}.

===============================================================================
[ Parameters ]

{format}

  The format string is composed of zero or more directives: ordinary characters
  (excluding %) that are copied directly to the result and conversion
  specifications, each of which results in fetching its own parameter.

  A conversion specification follows this prototype: %[flags][width]
  [.precision]specifier.

                                     Flags
   Flag                                Description
  -       Left-justify within the given field width; Right justification is the
          default
  +       Prefix positive numbers with a plus sign +; Default only negative are
          prefixed with a negative sign.
  (space) Pads the result with spaces. This is the default.
  0       Only left-pads numbers with zeros. With s specifiers this can also
          right-pad with zeros.
  '(char) Pads the result with the character (char).

  Width

  An integer that says how many characters (minimum) this conversion should
  result in.

  Precision

  A period . followed by an integer who's meaning depends on the specifier:
   + For e, E, f and F specifiers: this is the number of digits to be printed
    after the decimal point (by default, this is 6).
   + For g and G specifiers: this is the maximum number of significant digits
    to be printed.
   + For s specifier: it acts as a cutoff point, setting a maximum character
    limit to the string.


    Note: If the period is specified without an explicit value for precision, 0
    is assumed.

    Note: Attempting to use a position specifier greater than PHP_INT_MAX will
    generate warnings.

                                  Specifiers
  Specifier                             Description
  %         A literal percent character. No argument is required.
  b         The argument is treated as an integer and presented as a binary
            number.
  c         The argument is treated as an integer and presented as the
            character with that ASCII.
  d         The argument is treated as an integer and presented as a (signed)
            decimal number.
            The argument is treated as scientific notation (e.g. 1.2e+2). The
  e         precision specifier stands for the number of digits after the
            decimal point since PHP 5.2.1. In earlier versions, it was taken as
            number of significant digits (one less).
  E         Like the e specifier but uses uppercase letter (e.g. 1.2E+2).
  f         The argument is treated as a float and presented as a
            floating-point number (locale aware).
            The argument is treated as a float and presented as a
  F         floating-point number (non-locale aware). Available as of PHP
            5.0.3.
            General format.

            Let P equal the precision if nonzero, 6 if the precision is
            omitted, or 1 if the precision is zero. Then, if a conversion with
  g         style E would have an exponent of X:

            If P > X ≥ −4, the conversion is with style f and precision P − (X
            + 1). Otherwise, the conversion is with style e and precision P −
            1.

  G         Like the g specifier but uses E and F.
  o         The argument is treated as an integer and presented as an octal
            number.
  s         The argument is treated and presented as a string.
  u         The argument is treated as an integer and presented as an unsigned
            decimal number.
  x         The argument is treated as an integer and presented as a
            hexadecimal number (with lowercase letters).
  X         The argument is treated as an integer and presented as a
            hexadecimal number (with uppercase letters).

  Warning

  The c type specifier ignores padding and width

  Warning

  Attempting to use a combination of the string and width specifiers with
  character sets that require more than one byte per character may result in
  unexpected results

  Variables will be co-erced to a suitable type for the specifier:

        Type Handling
   Type        Specifiers
  string  s
  integer d, u, c, o, x, X, b
  double  g, G, e, E, f, F

{...}

===============================================================================
[ Return Values ]

Returns a string produced according to the formatting string {format}, or FALSE
on failure.

===============================================================================
[ Examples ]

Example #1 Argument swapping

The format string supports argument numbering/swapping.

<?php >
  $num = 5;
  $location = 'tree';

  $format = 'There are %d monkeys in the %s';
  echo sprintf($format, $num, $location);
<?>

The above example will output:

There are 5 monkeys in the tree

However imagine we are creating a format string in a separate file, commonly
because we would like to internationalize it and we rewrite it as:

<?php >
  $format = 'The %s contains %d monkeys';
  echo sprintf($format, $num, $location);
<?>

We now have a problem. The order of the placeholders in the format string does
not match the order of the arguments in the code. We would like to leave the
code as is and simply indicate in the format string which arguments the
placeholders refer to. We would write the format string like this instead:

<?php >
  $format = 'The %2$s contains %1$d monkeys';
  echo sprintf($format, $num, $location);
<?>

An added benefit is that placeholders can be repeated without adding more
arguments in the code.

<?php >
  $format = 'The %2$s contains %1$d monkeys.
             That\'s a nice %2$s full of %1$d monkeys.';
  echo sprintf($format, $num, $location);
<?>

When using argument swapping, the n$ position specifier must come immediately
after the percent sign (%), before any other specifiers, as shown below.

Example #2 Specifying padding character

<?php >
  echo sprintf("%'.9d\n", 123);
  echo sprintf("%'.09d\n", 123);
<?>

The above example will output:

......123
000000123

Example #3 Position specifier with other specifiers

<?php >
  $format = 'The %2$s contains %1$04d monkeys';
  echo sprintf($format, $num, $location);
<?>

The above example will output:

The tree contains 0005 monkeys

Example #4 sprintf(): zero-padded integers

<?php >
  $isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
<?>

Example #5 sprintf(): formatting currency

<?php >
  $money1 = 68.75;
  $money2 = 54.35;
  $money = $money1 + $money2;
  echo $money;
  echo "\n";
  $formatted = sprintf("%01.2f", $money);
  echo $formatted;
<?>

The above example will output:

123.1
123.10

Example #6 sprintf(): scientific notation

<?php >
  $number = 362525200;

  echo sprintf("%.3e", $number);
<?>

The above example will output:

3.625e+8

===============================================================================
[ See Also ]

 * |printf| - Output a formatted string
 * |fprintf| - Write a formatted string to a stream
 * |vprintf| - Output a formatted string
 * |vsprintf| - Return a formatted string
 * |vfprintf| - Write a formatted string to a stream
 * |sscanf| - Parses input from a string according to a format
 * |fscanf| - Parses input from a file according to a format
 * |number_format| - Format a number with grouped thousands
 * |date| - Format a local time/date


vim:ft=help: