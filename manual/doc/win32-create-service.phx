*win32_create_service*

(PECL win32service >=0.1.0)

win32_create_service â€” Creates a new service entry in the SCM database

===============================================================================
[ Description ]

  win32_create_service ( array $details [, string $machine ] ) : mixed~

Attempts to add a service into the SCM database. Administrative privileges are
required for this to succeed.

===============================================================================
[ Parameters ]

{details}

  An array of service details:

  {service}

    The short name of the service. This is the name that you will use to
    control the service using the net command. The service must be unique (no
    two services can share the same name), and, ideally, should avoid having
    spaces in the name.

  {display}

    The display name of the service. This is the name that you will see in the
    Services Applet.

  {description}

    The long description of the service. This is the description that you will
    see in the Services Applet.

  {user}

    The name of the user account under which you want the service to run. If
    omitted, the service will run as the LocalSystem account. If the username
    is specified, you must also provide a password.

  {password}

    The password that corresponds to the {user}.

  {path}

    The full path to the executable module that will be launched when the
    service is started. If omitted, the path to the current PHP process will be
    used.

  {params}

    Command line parameters to pass to the service when it starts. If you want
    to run a PHP script as the service, then the first parameter should be the
    full path to the PHP script that you intend to run. If the script name or
    path contains spaces, then wrap the full path to the PHP script with ".

  {load_order}

    Controls the load_order. This is not yet fully supported.

  {svc_type}

    Sets the service type. If omitted, the default value is
    WIN32_SERVICE_WIN32_OWN_PROCESS. Don't change this unless you know what
    you're doing.

  {start_type}

    Specifies how the service should be started. The default is
    WIN32_SERVICE_AUTO_START which means the service will be launched when the
    machine starts up.

  {error_control}

    Informs the SCM what it should do when it detects a problem with the
    service. The default is WIN32_SERVER_ERROR_IGNORE. Changing this value is
    not yet fully supported.

  {delayed_start}

    If {delayed_start} is set to TRUE, then this will inform the SCM that this
    service should be started after other auto-start services are started plus
    a short delay.

    Any service can be marked as a delayed auto-start service; however, this
    setting has no effect unless the service's {start_type} is
    WIN32_SERVICE_AUTO_START.

    This setting is only applicable on Windows Vista and Windows Server 2008 or
    greater.

  {base_priority}

    To reduce the impact on processor utilisation, it may be necessary to set a
    base priority lower than normal.

    The {base_priority} can be set to one of the constants define in Win32 Base
    Priority Classes.

  {dependencies}

    To define the dependencies for your service, it may be necessary to set
    this parameter to the list of the services names in an array.

  {recovery_delay}

    This parameter defines the delay between the fail and the execution of
    recovery action. The value is in milliseconds.

    The default value is 60000.

  {recovery_action_1}

    The action will be executed on first failure. The default value is
    WIN32_SC_ACTION_NONE.

    The {recovery_action_1} can be set to one of the constants defined in Win32
    Recovery action.

  {recovery_action_2}

    The action will be executed on second failure. The default value is
    WIN32_SC_ACTION_NONE.

    The {recovery_action_2} can be set to one of the constants defined in Win32
    Recovery action.

  {recovery_action_3}

    The action will be executed on next failures. The default value is
    WIN32_SC_ACTION_NONE.

    The {recovery_action_3} can be set to one of the constants defined in Win32
    Recovery action.

  {recovery_reset_period}

    The failure count will be reset after the delay defined in the parameter.
    The delay is expirement in seconds.

    The default value is 86400.

  {recovery_enabled}

    Set this parameter at TRUE to enable the recovery settings, FALSE to
    disable.

    The default value is FALSE

  {recovery_reboot_msg}

    Set this parameter to define the message saved into the Windows Event Log
    before the reboot. Used only if one action is set to WIN32_SC_ACTION_REBOOT
    .

  {recovery_command}

    Set this parameter to define the command executed when one action is
    defined on WIN32_SC_ACTION_RUN_COMMAND.

{machine}

  The optional machine name on which you want to create a service. If omitted,
  it will use the local machine.

===============================================================================
[ Return Values ]

Returns WIN32_NO_ERROR on success, FALSE if there is a problem with the
parameters or a Win32 Error Code on failure.

===============================================================================
[ Examples ]

Example #1 A win32_create_service() example

Create a service with the short name 'dummyphp'.

<?php >
  $x = win32_create_service(array(
      'service'     => 'dummyphp',                                           //
   the name of your service
      'display'     => 'sample dummy PHP service',                           //
   short description
      'description' => 'This is a dummy Windows service created using PHP.', //
   long description
      'params'      => '"' . __FILE__ . '"  run',                            //
   path to the script and parameters
  ));
  debug_zval_dump($x);
<?>

Example #2 A win32_create_service() example with dependencies

Create a service with the short name 'dummyphp' and dependencies.

<?php >
  $x = win32_create_service(array(
      'service'      => 'dummyphp',                                           //
   the name of your service
      'display'      => 'sample dummy PHP service',                           //
   short description
      'description'  => 'This is a dummy Windows service created using PHP.', //
   long description
      'params'       => '"' . __FILE__ . '"  run',                            //
   path to the script and parameters
      'dependencies' => array("Netman"),                                      //
   The list of the dependencies 
  ));
  debug_zval_dump($x);
<?>

Example #3 A win32_create_service() example with recovery

Create a service with the short name 'dummyphp' and recovery settings.

<?php >
  $x = win32_create_service(array(
      'service'               => 'dummyphp'
  ,                                           // the name of your service
      'display'               => 'sample dummy PHP service'
  ,                           // short description
      'description'           => 
  'This is a dummy Windows service created using PHP.', // long description
      'params'                => '"' . __FILE__ . '"  run'
  ,                            // path to the script and parameters
      'recovery_delay'        => 120000
  ,                                               //
   Recovery action is executed after 2 minutes
      'recovery_action_1'     => WIN32_SC_ACTION_RESTART
  ,                              // On first failure, restart the service
      'recovery_action_2'     => WIN32_SC_ACTION_RUN_COMMAND
  ,                          // On second failure, execute the commmand
      'recovery_action_3'     => WIN32_SC_ACTION_NONE
  ,                                 // On other failure, do nothing
      'recovery_reset_period' => 86400
  ,                                                //
   Reset the fail counter after 1 day
      'recovery_enabled'      => true
  ,                                                 //
   Enable the recovery parameter
      'recovery_reboot_msg'   => null
  ,                                                 //
   Do not define a reboot message, it's not needed here
      'recovery_command'      => "c:\clean-service.bat"
  ,                               //
   When the action is WIN32_SC_ACTION_RUN_COMMAND, execute this command
  ));
  debug_zval_dump($x);
<?>

===============================================================================
[ Changelog ]

Version                               Description
        The {dependencies}, {recovery_delay}, {recovery_action_1},
0.4.0   {recovery_action_2}, {recovery_action_3}, {recovery_reset_period},
        {recovery_enabled}, {recovery_reboot_msg} and {recovery_command}
        parameters have been added.

===============================================================================
[ See Also ]

 * |win32_delete_service| - Deletes a service entry from the SCM database
 * Win32 Base Priority Classes
 * Win32 Recovery action
 * Win32 Error Codes


vim:ft=help: