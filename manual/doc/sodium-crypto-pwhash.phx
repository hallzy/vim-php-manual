*sodium_crypto_pwhash*

(PHP 7 >= 7.2.0)

sodium_crypto_pwhash â€” Derive a key from a password

===============================================================================
[ Description ]

  sodium_crypto_pwhash ( int $length , string $password , string $salt , int~
  $opslimit , int $memlimit [, int $alg ] ) : string~

This function provides low-level access to libsodium's crypto_pwhash key
derivation function. Unless you have specific reason to use this function, you
should use |sodium_crypto_pwhash_str| or |password_hash| functions instead.

===============================================================================
[ Parameters ]

{length}

  integer; The length of the password hash to generate, in bytes.

{password}

  string; The password to generate a hash for.

{salt}

  string A salt to add to the password before hashing. The salt should be
  unpredictable, ideally generated from a good random mumber source such as 
  |random_bytes|, and have a length of at least SODIUM_CRYPTO_PWHASH_SALTBYTES
  bytes.

{opslimit}

  Represents a maximum amount of computations to perform. Raising this number
  will make the function require more CPU cycles to compute a key. There are
  some constants available to set the operations limit to appropriate values
  depending on intended use, in order of strength:
  SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
  SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE and
  SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE.

{memlimit}

  The maximum amount of RAM that the function will use, in bytes. There are
  constants to help you choose an appropriate value, in order of size:
  SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE,
  SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE, and
  SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE. Typically these should be paired
  with the matching {opslimit} values.

{alg}

  integer A number indicating the hash algorithm to use. By default
  SODIUM_CRYPTO_PWHASH_ALG_DEFAULT (the currently recommended algorithm, which
  can change from one version of libsodium to another), or explicitly using
  SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13, representing the Argon2id algorithm
  version 1.3.

===============================================================================
[ Return Values ]

Returns the derived key, or FALSE on failure. The return value is a binary
string of the hash, not an ASCII-encoded representation, and does not contain
additional information about the parameters used to create the hash, so you
will need to keep that information if you are ever going to verify the password
in future. Use |sodium_crypto_pwhash_str| to avoid needing to do all that.

===============================================================================
[ Examples ]

Example #1 |password_hash| example

<?php >
  //Need to keep the salt if we're ever going to be able to check this password
  $salt = random_bytes(SODIUM_CRYPTO_PWHASH_SALTBYTES);
  //Using bin2hex to keep output readable
  echo bin2hex(
      sodium_crypto_pwhash(
          16, // == 128 bits
          'password',
          $salt,
          SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
          SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE,
          SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13
      )
  );
<?>

The above example will output something similar to:

a18f346ba57992eb7e4ae6abf3fd30ee


vim:ft=help: