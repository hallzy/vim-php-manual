*printf*

(PHP 4, PHP 5, PHP 7)

printf — Output a formatted string

===============================================================================
[ Description ]

  printf ( string $format [, mixed $... ] ) : int~

Produces output according to {format}.

===============================================================================
[ Parameters ]

{format}

  The format string is composed of zero or more directives: ordinary characters
  (excluding %) that are copied directly to the result and conversion
  specifications, each of which results in fetching its own parameter.

  A conversion specification follows this prototype: %[flags][width]
  [.precision]specifier.

                                     Flags
   Flag                                Description
  -       Left-justify within the given field width; Right justification is the
          default
  +       Prefix positive numbers with a plus sign +; Default only negative are
          prefixed with a negative sign.
  (space) Pads the result with spaces. This is the default.
  0       Only left-pads numbers with zeros. With s specifiers this can also
          right-pad with zeros.
  '(char) Pads the result with the character (char).

  Width

  An integer that says how many characters (minimum) this conversion should
  result in.

  Precision

  A period . followed by an integer who's meaning depends on the specifier:
   + For e, E, f and F specifiers: this is the number of digits to be printed
    after the decimal point (by default, this is 6).
   + For g and G specifiers: this is the maximum number of significant digits
    to be printed.
   + For s specifier: it acts as a cutoff point, setting a maximum character
    limit to the string.


    Note: If the period is specified without an explicit value for precision, 0
    is assumed.

    Note: Attempting to use a position specifier greater than PHP_INT_MAX will
    generate warnings.

                                  Specifiers
  Specifier                             Description
  %         A literal percent character. No argument is required.
  b         The argument is treated as an integer and presented as a binary
            number.
  c         The argument is treated as an integer and presented as the
            character with that ASCII.
  d         The argument is treated as an integer and presented as a (signed)
            decimal number.
            The argument is treated as scientific notation (e.g. 1.2e+2). The
  e         precision specifier stands for the number of digits after the
            decimal point since PHP 5.2.1. In earlier versions, it was taken as
            number of significant digits (one less).
  E         Like the e specifier but uses uppercase letter (e.g. 1.2E+2).
  f         The argument is treated as a float and presented as a
            floating-point number (locale aware).
            The argument is treated as a float and presented as a
  F         floating-point number (non-locale aware). Available as of PHP
            5.0.3.
            General format.

            Let P equal the precision if nonzero, 6 if the precision is
            omitted, or 1 if the precision is zero. Then, if a conversion with
  g         style E would have an exponent of X:

            If P > X ≥ −4, the conversion is with style f and precision P − (X
            + 1). Otherwise, the conversion is with style e and precision P −
            1.

  G         Like the g specifier but uses E and F.
  o         The argument is treated as an integer and presented as an octal
            number.
  s         The argument is treated and presented as a string.
  u         The argument is treated as an integer and presented as an unsigned
            decimal number.
  x         The argument is treated as an integer and presented as a
            hexadecimal number (with lowercase letters).
  X         The argument is treated as an integer and presented as a
            hexadecimal number (with uppercase letters).

  Warning

  The c type specifier ignores padding and width

  Warning

  Attempting to use a combination of the string and width specifiers with
  character sets that require more than one byte per character may result in
  unexpected results

  Variables will be co-erced to a suitable type for the specifier:

        Type Handling
   Type        Specifiers
  string  s
  integer d, u, c, o, x, X, b
  double  g, G, e, E, f, F

{...}

===============================================================================
[ Return Values ]

Returns the length of the outputted string.

===============================================================================
[ Examples ]

Example #1 printf(): various examples

<?php >
  $n =  43951789;
  $u = -43951789;
  $c = 65; // ASCII 65 is 'A'

  // notice the double %%, this prints a literal '%' character
  printf("%%b = '%b'\n", $n); // binary representation
  printf("%%c = '%c'\n", $c); // print the ascii character, same as chr()
   function
  printf("%%d = '%d'\n", $n); // standard integer representation
  printf("%%e = '%e'\n", $n); // scientific notation
  printf("%%u = '%u'\n", $n); //
   unsigned integer representation of a positive integer
  printf("%%u = '%u'\n", $u); //
   unsigned integer representation of a negative integer
  printf("%%f = '%f'\n", $n); // floating point representation
  printf("%%o = '%o'\n", $n); // octal representation
  printf("%%s = '%s'\n", $n); // string representation
  printf("%%x = '%x'\n", $n); // hexadecimal representation (lower-case)
  printf("%%X = '%X'\n", $n); // hexadecimal representation (upper-case)

  printf("%%+d = '%+d'\n", $n); // sign specifier on a positive integer
  printf("%%+d = '%+d'\n", $u); // sign specifier on a negative integer
<?>

The above example will output:

%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'

Example #2 printf(): string specifiers

<?php >
  $s = 'monkey';
  $t = 'many monkeys';

  printf("[%s]\n",      $s); // standard string output
  printf("[%10s]\n",    $s); // right-justification with spaces
  printf("[%-10s]\n",   $s); // left-justification with spaces
  printf("[%010s]\n",   $s); // zero-padding works on strings too
  printf("[%'#10s]\n",  $s); // use the custom padding character '#'
  printf("[%10.10s]\n", $t); //
   left-justification but with a cutoff of 10 characters
<?>

The above example will output:

[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]

===============================================================================
[ See Also ]

 * |print| - Output a string
 * printf()
 * |sprintf| - Return a formatted string
 * |fprintf| - Write a formatted string to a stream
 * |vprintf| - Output a formatted string
 * |vsprintf| - Return a formatted string
 * |vfprintf| - Write a formatted string to a stream
 * |sscanf| - Parses input from a string according to a format
 * |fscanf| - Parses input from a file according to a format
 * |number_format| - Format a number with grouped thousands
 * |date| - Format a local time/date
 * |flush| - Flush system output buffer


vim:ft=help: